trigger:
- master

pool:
  name: Hosted macOS
    
name: $(Date:yyyyMMdd)$(Rev:.r)

steps:
- task: NodeTool@0
  displayName: 'Use Node 11.x'
  inputs:
    versionSpec: 11.x

- task: Npm@1
  displayName: 'npm install'
  inputs:
    verbose: false

- task: Npm@1
  displayName: 'calculate next version'
  inputs:
    command: custom
    verbose: false
    customCommand: 'run semantic-release-version'

- task: Bash@3
  displayName: 'show next version'
  inputs:
    targetType: 'inline'
    script: |
      env
      echo $NEXTRELEASE

- task: Bash@3
  displayName: 'update ios-CFBundleVersion'
  inputs:
    targetType: 'inline'
    script: 'node build/update_bundle_version.js $(nextRelease) $(Build.BuildId)'

- task: DeleteFiles@1
  displayName: 'delete unit test results'
  inputs:
    SourceFolder: projects/ionic-feedback-module/junit
    Contents: 'TESTS*.xml'

- task: Npm@1
  displayName: 'npm run test-coverage'
  inputs:
    command: custom
    verbose: false
    customCommand: 'run test-coverage'

- task: PublishTestResults@2
  displayName: 'publish unit test results'
  condition: succeededOrFailed()
  inputs:
    searchFolder: $(System.DefaultWorkingDirectory)/projects/ionic-feedback-module/junit
    testRunTitle: Unit Tests
    testResultsFormat: JUnit
    testResultsFiles: "**/TESTS*.xml"

- task: Npm@1
  displayName: 'npm run codecov'
  inputs:
    command: custom
    verbose: false
    customCommand: 'run codecov'

- task: Npm@1
  displayName: 'npm run test-compodoc'
  condition: succeededOrFailed()
  inputs:
    command: custom
    verbose: false
    customCommand: 'run test-compodoc'

- task: Npm@1
  displayName: 'npm run lint'
  condition: succeededOrFailed()
  inputs:
    command: custom
    verbose: false
    customCommand: 'run lint'

- task: Npm@1
  displayName: 'npm run build module'
  inputs:
    command: custom
    verbose: false
    customCommand: 'run build-module'

- task: Npm@1
  displayName: 'npm run build web'
  inputs:
    command: custom
    verbose: false
    customCommand: 'run build-web'

- task: InstallAppleCertificate@2
  displayName: 'install development certificate'
  inputs:
    certSecureFile: 'ios_development.p12'
    certPwd: '$(P12password)'
    keychain: 'temp'

- task: InstallAppleProvisioningProfile@1
  displayName: 'install provisioning certificate'
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: 'Feedback_Development.mobileprovision'

- task: IonicCommand@1
  displayName: 'build app for ios'
  inputs:
    ionicCommand: 'cordova build ios'
    ionicArgs: '--project ionic-feedback-module-app --configuration cordova --prod --release --device --verbose -- --verbose'

- task: Npm@1
  displayName: 'deploy module'
  inputs:
    command: custom
    verbose: true
    customCommand: 'run semantic-release'

- task: Bash@3
  displayName: 'copy app for ios to staging directory'
  inputs:
    targetType: 'inline'
    script: |
      mkdir -p $(Build.ArtifactStagingDirectory)/app/ios
      cp -av platforms/ios/build/device/Feedback.ipa $(Build.ArtifactStagingDirectory)/app/ios
      cp -av platforms/ios/build/device/Feedback.app.dSYM/ $(Build.ArtifactStagingDirectory)/app/ios/Feedback.app.dSYM

- task: PublishBuildArtifacts@1
  displayName: 'publish app for ios'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/app/ios'
    ArtifactName: 'app-ios'
    publishLocation: 'Container'
